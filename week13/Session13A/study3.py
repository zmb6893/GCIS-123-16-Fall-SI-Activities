"""
Practicum Review
"""

def make_tuple(a,b,c):
    """
    Returns a tuple containing all three parameters.
    """
    pass

def reverse_tuple(sequence):
    """
    Returns a tuple containing the values in the sequence in reverse order.
    """
    pass

def make_list(a,b,c):
    """
    Returns a list containing all three parameters
    """
    pass

def nth_list(sequence, n):
    """
    Return a list that has every nth value from the sequence
    """
    pass

def splice(a,b):
    """
    The function should permanently add all of the elements from list b to list a. Do not return a value.
    """
    pass

def odds_before_evens(a_list):
    """
    Rearrange the elements in the list so that all of the odd values come before the even values. Otherwise, the values should remain in the same relative order.Do not return a value - modify the list inplace
    """
    pass

def bisect(a_list):
    """
    Returns the list bisected into two halves. If the list has an odd number of elements, do not include the middle element in either half.
    """
    pass

def equivalent(a, b):
    """
    Return True if the sequences contain all of the same values, even if they are in a different order, and False otherwise
    """
    pass

class Domino:
    """
    Create a Python class to represent a domino. Be sure to include slots and a constructor. 
    """
    def __init__(self):
        """
        It's a constructor my man
        """
        pass

def domino_to_string(domino):
    """
    Turns a domino into a string
    """
    pass

def is_match(dom1,dom2):
    """
    Return True if the dominos have the same number of pips at either end, and False otherwise.
    """
    pass

def list_range(m,n):
    """
    Uses list comprehension to return the list containing all of the values from m to n-1
    """
    pass

def multiples(sequence, n):
    """
    Use list comprehension to create a list that has all of the values from the sequence that are evenly divisible by n
    """
    pass

def only_vowels(a_string):
    """
    Use list comprehension to return a list containing only the vowels in the string. Your function should run in O(n) where n is the length of the string.
    """
    pass

def random_count(n):
    """
    Return the number of times the random.randint function must be called before all of the values from 0 to n are generated randomly
    """
    pass

def disjoint(a,b):
    """
    Returns True if the sets are disjoint and False otherwise
    """
    pass

def random_counts(n):
    """
    Returns a dictionary that counts how many times each unique value is generated by random.randint before all of the values from 0 to n are generated at least once.
    """
    pass

def frequencies(counts):
    """
    Print each count andits frequency in sorted order.
    """
    pass

def main():
    # Call your make_tuple function at least twice with different arguments and print the tuples that are returned.
    # Call reverse_tuple from main with at least two different kinds of sequences and print the tuple that is returned
    # Call your make_list function from main at least twice with different arguments and print the lists that are returned
    # Call your function from main with at least two different sequences and print the lists that are returned
    # Print list a before and after the splice function is called
    # Call your odds_before_evens function and print before and after
    # Call the bisect function and print the results
    # Call equivalent and print the results
    # Call domino_to_string on two different dominos
    # Call is match on a few dominos
    # Call list_range and print
    # Call multiples on a sequence
    # Call only_vowels 
    # Call random_count
    # Call disjoint
    # Use the dictionary in your main function to determine the total number of times random.randint was called, the maximum number of times that any value was generated, and the sorted list of values that were generated the maximum number of times. 
    pass